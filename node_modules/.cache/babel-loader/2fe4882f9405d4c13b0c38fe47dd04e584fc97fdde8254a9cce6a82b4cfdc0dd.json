{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marooy990\\\\jdi\\\\projects\\\\mini-project-JavaChatApplication\\\\chatApp\\\\react-chatApp\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs'; // STOMP is a simple text-oriented messaging protocol\nimport SockJS from 'sockjs-client'; // SockJS is a JavaScript library for providing WebSocket-like objects\n// Global variable to store the STOMP client\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  // State to manage private chats, public chats, current tab, and user data\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    // Store the username of the user\n    receivername: '',\n    // Store the name of the user you are sending a private message to\n    connected: false,\n    // Track if the user is connected to the chat\n    message: '',\n    // Store the message the user wants to send\n    editing: null,\n    // For editing a message\n    editMessageContent: '' // For storing the content of the message being edited\n  });\n  useEffect(() => {\n    console.log('User data:', userData);\n  }, [userData]);\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:9092/ws'); // Create a new SockJS connection\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  // Function to connect to the chat server\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n  // Function to notify the server that the user has joined\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  // Function to handle received public messages\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body); // Parse the received message\n    console.log('Received message:', payloadData);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []); // Add the new user to private chats\n          setPrivateChats(new Map(privateChats));\n        }\n        break;\n      case \"MESSAGE\":\n        setPublicChats(prevChats => [...prevChats, payloadData]); // Add the new message to the public chat\n        break;\n      case \"EDITED\":\n        const updatedPublicChats = publicChats.map(chat =>\n        // Update the edited message in public chat\n        chat.id === payloadData.id ? payloadData : chat);\n        setPublicChats(updatedPublicChats);\n\n        // Also update private chats if needed\n        if (privateChats.has(payloadData.senderName)) {\n          const updatedPrivateChats = privateChats.get(payloadData.senderName).map(chat => chat.id === payloadData.id ? payloadData : chat);\n          privateChats.set(payloadData.senderName, updatedPrivateChats);\n          setPrivateChats(new Map(privateChats));\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  // Function to handle received private messages\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body); // Parse the received message\n    console.log('Received private message:', payloadData);\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n  // Function to handle errors during connection\n  const onError = err => {\n    console.log('WebSocket error:', err);\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      \"message\": value\n    });\n  };\n  const handleEditMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      \"editMessageContent\": value\n    });\n  };\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      \"username\": value\n    });\n  };\n  const registerUser = () => {\n    connect();\n  };\n  const startEditing = (messageId, messageContent) => {\n    setUserData({\n      ...userData,\n      editing: messageId,\n      editMessageContent: messageContent\n    });\n  };\n  const saveEditedMessage = () => {\n    if (stompClient && userData.editing) {\n      var updatedMessage = {\n        id: userData.editing,\n        senderName: userData.username,\n        message: userData.editMessageContent,\n        status: \"EDITED\"\n      };\n      console.log('Sending edited message:', updatedMessage);\n      stompClient.send(\"/app/edit-message\", {}, JSON.stringify(updatedMessage));\n\n      // Update local state\n      const updatedPublicChats = publicChats.map(chat => chat.id === userData.editing ? {\n        ...chat,\n        message: userData.editMessageContent,\n        lastModified: new Date()\n      } : chat);\n      setPublicChats(updatedPublicChats);\n\n      // Also update private chats if needed\n      if (privateChats.has(tab)) {\n        const updatedPrivateChats = privateChats.get(tab).map(chat => chat.id === userData.editing ? {\n          ...chat,\n          message: userData.editMessageContent,\n          lastModified: new Date()\n        } : chat);\n        privateChats.set(tab, updatedPrivateChats);\n        setPrivateChats(new Map(privateChats));\n      }\n      setUserData({\n        ...userData,\n        editing: null,\n        editMessageContent: ''\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: userData.editing === chat.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: userData.editMessageContent,\n                  onChange: handleEditMessage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: saveEditedMessage,\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 45\n              }, this) : chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 37\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 79\n            }, this), chat.senderName === userData.username && !userData.editing && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startEditing(chat.id, chat.message),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"Enter your message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 44\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: userData.editing === chat.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: userData.editMessageContent,\n                  onChange: handleEditMessage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: saveEditedMessage,\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 45\n              }, this) : chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 37\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 79\n            }, this), chat.senderName === userData.username && !userData.editing && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startEditing(chat.id, chat.message),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"Enter your message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your name\",\n        onChange: handleUsername\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: registerUser,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"Lx4NVIYnF/CCdUlQoDhMXP6Swx4=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","editing","editMessageContent","console","log","connect","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","prevChats","updatedPublicChats","map","chat","id","has","updatedPrivateChats","push","list","err","handleMessage","event","value","target","handleEditMessage","sendValue","sendPrivateValue","receiverName","handleUsername","registerUser","startEditing","messageId","messageContent","saveEditedMessage","updatedMessage","lastModified","Date","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","keys","name","index","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/marooy990/jdi/projects/mini-project-JavaChatApplication/chatApp/react-chatApp/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs'; // STOMP is a simple text-oriented messaging protocol\r\nimport SockJS from 'sockjs-client'; // SockJS is a JavaScript library for providing WebSocket-like objects\r\n// Global variable to store the STOMP client\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n // State to manage private chats, public chats, current tab, and user data\r\n    const [privateChats, setPrivateChats] = useState(new Map());\r\n    const [publicChats, setPublicChats] = useState([]);\r\n    const [tab, setTab] = useState(\"CHATROOM\");\r\n    const [userData, setUserData] = useState({\r\n        username: '', // Store the username of the user\r\n        receivername: '',  // Store the name of the user you are sending a private message to\r\n        connected: false,  // Track if the user is connected to the chat\r\n        message: '',   // Store the message the user wants to send\r\n        editing: null, // For editing a message\r\n        editMessageContent: '' // For storing the content of the message being edited\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log('User data:', userData);\r\n    }, [userData]);\r\n\r\n    const connect = () => {\r\n        let Sock = new SockJS('http://localhost:9092/ws'); // Create a new SockJS connection\r\n        stompClient = over(Sock);\r\n        stompClient.connect({}, onConnected, onError);\r\n    }\r\n// Function to connect to the chat server\r\n    const onConnected = () => {\r\n        setUserData({ ...userData, \"connected\": true });\r\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n        userJoin();\r\n    }\r\n // Function to notify the server that the user has joined\r\n    const userJoin = () => {\r\n        var chatMessage = {\r\n            senderName: userData.username,\r\n            status: \"JOIN\"\r\n        };\r\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n    }\r\n\r\n   // Function to handle received public messages\r\n       const onMessageReceived = (payload) => {\r\n           var payloadData = JSON.parse(payload.body); // Parse the received message\r\n           console.log('Received message:', payloadData);\r\n           switch (payloadData.status) {\r\n               case \"JOIN\":\r\n                   if (!privateChats.get(payloadData.senderName)) {\r\n                       privateChats.set(payloadData.senderName, []);// Add the new user to private chats\r\n                       setPrivateChats(new Map(privateChats));\r\n                   }\r\n                   break;\r\n               case \"MESSAGE\":\r\n                   setPublicChats(prevChats => [...prevChats, payloadData]);// Add the new message to the public chat\r\n                   break;\r\n               case \"EDITED\":\r\n                   const updatedPublicChats = publicChats.map(chat =>\r\n                   // Update the edited message in public chat\r\n                       chat.id === payloadData.id ? payloadData : chat\r\n                   );\r\n                   setPublicChats(updatedPublicChats);\r\n\r\n                // Also update private chats if needed\r\n                if (privateChats.has(payloadData.senderName)) {\r\n                    const updatedPrivateChats = privateChats.get(payloadData.senderName).map(chat =>\r\n                        chat.id === payloadData.id ? payloadData : chat\r\n                    );\r\n                    privateChats.set(payloadData.senderName, updatedPrivateChats);\r\n                    setPrivateChats(new Map(privateChats));\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n// Function to handle received private messages\r\n    const onPrivateMessage = (payload) => {\r\n        var payloadData = JSON.parse(payload.body); // Parse the received message\r\n        console.log('Received private message:', payloadData);\r\n        if (privateChats.get(payloadData.senderName)) {\r\n            privateChats.get(payloadData.senderName).push(payloadData);\r\n            setPrivateChats(new Map(privateChats));\r\n        } else {\r\n            let list = [];\r\n            list.push(payloadData);\r\n            privateChats.set(payloadData.senderName, list);\r\n            setPrivateChats(new Map(privateChats));\r\n        }\r\n    }\r\n// Function to handle errors during connection\r\n    const onError = (err) => {\r\n        console.log('WebSocket error:', err);\r\n    }\r\n\r\n    const handleMessage = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"message\": value });\r\n    }\r\n\r\n    const handleEditMessage = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"editMessageContent\": value });\r\n    }\r\n\r\n    const sendValue = () => {\r\n        if (stompClient) {\r\n            var chatMessage = {\r\n                senderName: userData.username,\r\n                message: userData.message,\r\n                status: \"MESSAGE\"\r\n            };\r\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n            setUserData({ ...userData, \"message\": \"\" });\r\n        }\r\n    }\r\n\r\n    const sendPrivateValue = () => {\r\n        if (stompClient) {\r\n            var chatMessage = {\r\n                senderName: userData.username,\r\n                receiverName: tab,\r\n                message: userData.message,\r\n                status: \"MESSAGE\"\r\n            };\r\n            if (userData.username !== tab) {\r\n                privateChats.get(tab).push(chatMessage);\r\n                setPrivateChats(new Map(privateChats));\r\n            }\r\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n            setUserData({ ...userData, \"message\": \"\" });\r\n        }\r\n    }\r\n\r\n    const handleUsername = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"username\": value });\r\n    }\r\n\r\n    const registerUser = () => {\r\n        connect();\r\n    }\r\n\r\n    const startEditing = (messageId, messageContent) => {\r\n        setUserData({ ...userData, editing: messageId, editMessageContent: messageContent });\r\n    }\r\n\r\n    const saveEditedMessage = () => {\r\n        if (stompClient && userData.editing) {\r\n            var updatedMessage = {\r\n                id: userData.editing,\r\n                senderName: userData.username,\r\n                message: userData.editMessageContent,\r\n                status: \"EDITED\"\r\n            };\r\n            console.log('Sending edited message:', updatedMessage);\r\n            stompClient.send(\"/app/edit-message\", {}, JSON.stringify(updatedMessage));\r\n\r\n            // Update local state\r\n            const updatedPublicChats = publicChats.map(chat =>\r\n                chat.id === userData.editing ? { ...chat, message: userData.editMessageContent, lastModified: new Date() } : chat\r\n            );\r\n            setPublicChats(updatedPublicChats);\r\n\r\n            // Also update private chats if needed\r\n            if (privateChats.has(tab)) {\r\n                const updatedPrivateChats = privateChats.get(tab).map(chat =>\r\n                    chat.id === userData.editing ? { ...chat, message: userData.editMessageContent, lastModified: new Date() } : chat\r\n                );\r\n                privateChats.set(tab, updatedPrivateChats);\r\n                setPrivateChats(new Map(privateChats));\r\n            }\r\n\r\n            setUserData({ ...userData, editing: null, editMessageContent: '' });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {userData.connected ?\r\n                <div className=\"chat-box\">\r\n                    <div className=\"member-list\">\r\n                        <ul>\r\n                            <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Chatroom</li>\r\n                            {[...privateChats.keys()].map((name, index) => (\r\n                                <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n                        <ul className=\"chat-messages\">\r\n                            {publicChats.map((chat, index) => (\r\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                                    <div className=\"message-data\">\r\n                                        {userData.editing === chat.id ? (\r\n                                            <div>\r\n                                                <input type=\"text\" value={userData.editMessageContent} onChange={handleEditMessage} />\r\n                                                <button onClick={saveEditedMessage}>Save</button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            chat.message\r\n                                        )}\r\n                                    </div>\r\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                                    {chat.senderName === userData.username && !userData.editing && (\r\n                                        <button onClick={() => startEditing(chat.id, chat.message)}>Edit</button>\r\n                                    )}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n                        <div className=\"send-message\">\r\n                            <input type=\"text\" className=\"input-message\" placeholder=\"Enter your message\" value={userData.message} onChange={handleMessage} />\r\n                            <button type=\"button\" className=\"send-button\" onClick={sendValue}>Send</button>\r\n                        </div>\r\n                    </div>}\r\n                    {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n                        <ul className=\"chat-messages\">\r\n                            {[...privateChats.get(tab)].map((chat, index) => (\r\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                                    <div className=\"message-data\">\r\n                                        {userData.editing === chat.id ? (\r\n                                            <div>\r\n                                                <input type=\"text\" value={userData.editMessageContent} onChange={handleEditMessage} />\r\n                                                <button onClick={saveEditedMessage}>Save</button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            chat.message\r\n                                        )}\r\n                                    </div>\r\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                                    {chat.senderName === userData.username && !userData.editing && (\r\n                                        <button onClick={() => startEditing(chat.id, chat.message)}>Edit</button>\r\n                                    )}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n                        <div className=\"send-message\">\r\n                            <input type=\"text\" className=\"input-message\" placeholder=\"Enter your message\" value={userData.message} onChange={handleMessage} />\r\n                            <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Send</button>\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input type=\"text\" placeholder=\"Enter your name\" onChange={handleUsername} />\r\n                    <button onClick={registerUser}>Connect</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}